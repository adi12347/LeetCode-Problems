class Solution {
public:
    
    void BFS(vector<vector<int>> &mat,int i,int j,int &count){
	queue<pair<int,int>> q;
	q.push({i,j});
	while(!q.empty()){
		int k = q.size();
		while(k--){
			int x = q.front().first, y = q.front().second;
			q.pop();
			if(mat[x][y] == 0){
				return;
			}
			if(x-1 >= 0){
				q.push({x-1,y});
			}
			if(x+1 < mat.size()){
				q.push({x+1,y});
			}
			if(y-1 >= 0){
				q.push({x,y-1});
			}
			if(y+1 < mat[0].size()){
				q.push({x,y+1});
			}
		}
		count++;
	}
    }
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
	vector<vector<int>> ans(m,vector<int>(n));
	for(int i=0; i<m; i++){
		for(int j=0; j<n; j++){
			if(matrix[i][j] == 0)
				ans[i][j] = 0;
			else{
				int count = 0;
				BFS(matrix,i,j,count);
				ans[i][j] = count;
			}
		}
	}
	return ans;
}
};
